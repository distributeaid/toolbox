# CI FILE FOR lib/
prepare_elixir:
  extends: .elixir
  stage: prepare
  script:
    - "true"

build_elixir:
  extends: .elixir
  variables:
    MIX_ENV: "prod"
  stage: build
  needs: ["prepare_elixir"]
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  before_script:
    - apk upgrade -ql ; apk add -ql python3
    - pip3 install -q awscli
    - docker info
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
  script:
    - docker build -t $GITLAB_CONTAINER_TEST_IMAGE -f web.Dockerfile .
    - docker push $GITLAB_CONTAINER_TEST_IMAGE
    - echo $(aws ecr get-login-password) | docker login --username AWS --password-stdin 299303747484.dkr.ecr.us-east-2.amazonaws.com
    - docker tag $GITLAB_CONTAINER_TEST_IMAGE $ECR_CONTAINER_TEST_IMAGE 
    - docker push $ECR_CONTAINER_TEST_IMAGE

unit_test_elixir:
  extends: .elixir
  variables:
    MIX_ENV: "test"
  stage: unit_test
  needs: ["prepare_elixir"]
  image: elixir:1.7
  services:
    - name: postgres:11.2
      alias: dbtest
  script:
    - apt-get update && apt-get -y install postgresql-client
    - mix local.hex --force
    - mix local.rebar
    - mix deps.get --only test
    - mix ecto.reset
    - mix test
    - mix coveralls
