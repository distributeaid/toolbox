<%= form_for @changeset, @action, [class: "form-horizontal"], fn f -> %>
  <%= component "required.partial.html" %>

  <%= if @changeset.action do %>
    <div class="toast toast-error">
      <p>Oops, something went wrong! Please check the errors below.</p>
    </div>
  <% end %>

  <div class="form-group form-group--required <%= validation_status_class(f, :type) %>">
    <%= label f, :type %>
    <%= select f, :type, [nil, "Pickup": "pickup", "Dropoff": "dropoff"], class: "form-select select2--route-type" %>
    <%= error_tag f, :type %>
    <p class="form-input-desc">
      You can also enter a custom value for the type of stop this is!  Simply click on the select box, type in the value, and hit enter.  You should now be able to see this value and it will be saved when you submit the form.
    </p>
  </div>

  <div class="form-group form-group--required <%= validation_status_class(f, :address) %>">
    <%= label f, :address %>
    <%= text_input f, :address, class: "form-input", placeholder: "4 Privet Drive, Little Whinging, Surrey" %>
    <%= error_tag f, :address %>
    <p class="form-input-desc">
      You can enter an exact address, or just a city / country.
    </p>
  </div>

  <div class="form-group form-group--required <%= validation_status_class(f, :date) %>">
    <%= label f, :date, "(Estimated) Date" %>
    <%= date_input f, :date, class: "form-input" %>
    <%= error_tag f, :date %>
    <p class="form-input-desc">
      Route Stops are ordered by date.  If there isn't an exact date set, it's ok to enter an estimate to get the ordering right.
    </p>
  </div>

  <!--
  <div class="form-group <%= validation_status_class(f, :groups) %>">
    <%= label f, :groups %>
    <%= text_input f, :groups, class: "form-input" %>
    <%= error_tag f, :groups %>
  </div>
  -->

  <!-- TODO: none of this has been styled after switching from Kube => Spectre since it was commented out -->
  <!--
    <%= if has_routes?(@shipment.routes) and has_checklist?(assigns.conn.path_info, @shipment.routes) do %>
        <div class="form-item is-inline" id="customList">
            <%= label f, :checklist %>
            <%= for {r, i} <- Enum.with_index(@route.checklist) do %>
                <%= text_input f, :checklist, value: r, name: "route[checklist]_#{i}", oninput: "checkTicket(this)" %>
                <%= error_tag f, :checklist %>
            <% end %>
            <%= text_input f, :checklist, value: "", name: "route[checklist]_#{length(@route.checklist)}", oninput: "checkTicket(this)" %>
        </div>
    <% else %>
        <div class="form-item text-center">
        <input type="checkbox" name="check_for_custom_list" id="checkForCustomList" onclick="showCustomList()">
            Do you want to create a custom list of steps for this stop?
        <br>
        </div>
            <div class="form-item is-inline" id="customList" hidden>
                <%= label f, :checklist %>
                <%= text_input f, :checklist, name: "route[checklist]_0", oninput: "checkTicket(this)" %>
                <%= error_tag f, :checklist %>
            </div>
    <% end %>
  -->

  <div class="form-group col-9 col-ml-auto">
    <%= submit "Submit", class: "btn btn-lg btn-primary" %>
  </div>
<% end %>

<!--
<script>
let gateKeeper = {
    ledger: [],
    check_ticket: function(name){

        if(!this.ledger.includes(name)){
            this.ledger.push(name);
            return true;
        }
        return false;
    }
};

function showCustomList() {
    let check = document.getElementById("checkForCustomList");
    if(check.checked===false) document.getElementById("customList").style.display = 'none';
    else document.getElementById("customList").style.display = 'inline';
}

function checkTicket(ele){
    if(gateKeeper.check_ticket(ele.name)){
        createNewInput(ele.name);
    }
}

function createNewInput(name){

    let num = name.substring(17, name[name.length]);
    let value = Number.isNaN(num) ? 1 : Number(num) + 1;
    let container = document.getElementById("customList");
    let input = document.createElement("input");
    input.type = 'text';
    input.name = `route[checklist]_${value}`;
    input.id="route_checklist";
    input.className = "route_checklist";
    input.oninput = function() {
        checkTicket(input);
    };
    container.appendChild(input);
}
</script>
-->
